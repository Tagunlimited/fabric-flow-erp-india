import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Minus, Plus, Package, MapPin } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface FabricInfo {
  fabric_id: string;
  fabric_name: string;
  color: string;
  gsm: number;
  image?: string;
  total_available_quantity: number;
  total_reserved_quantity: number;
  net_available_quantity: number;
  unit: string;
  storage_zones: {
    zone_id: string;
    zone_name: string;
    zone_code: string;
    location: string;
    available_quantity: number;
    reserved_quantity: number;
    net_available: number;
  }[];
}

interface StorageZone {
  id: string;
  zone_name: string;
  zone_code: string;
  location: string;
  available_quantity: number;
}

interface FabricPickingDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  orderId: string;
  orderNumber: string;
  customerName: string;
}

export const FabricPickingDialog: React.FC<FabricPickingDialogProps> = ({
  isOpen,
  onClose,
  onSuccess,
  orderId,
  orderNumber,
  customerName
}) => {
  const [fabrics, setFabrics] = useState<FabricInfo[]>([]);
  const [storageZones, setStorageZones] = useState<StorageZone[]>([]);
  const [pickingQuantities, setPickingQuantities] = useState<{[key: string]: {[zoneId: string]: number}}>({});
  const [selectedZones, setSelectedZones] = useState<{[key: string]: string[]}>({});
  const [notes, setNotes] = useState('');
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  // Load fabrics and storage zones when dialog opens
  useEffect(() => {
    if (isOpen) {
      loadFabricData();
      loadStorageZones();
    }
  }, [isOpen, orderId]);

  const loadFabricData = async () => {
    try {
      // First, get order items with fabric IDs
      const { data: orderItems, error: orderItemsError } = await supabase
        .from('order_items')
        .select('fabric_id')
        .eq('order_id', orderId)
        .not('fabric_id', 'is', null);

      if (orderItemsError) {
        console.error('Error loading order items:', orderItemsError);
        toast({
          title: "Error",
          description: "Failed to load order items",
          variant: "destructive",
        });
        return;
      }

      if (!orderItems || orderItems.length === 0) {
        setFabrics([]);
        return;
      }

      // Get unique fabric IDs
      const fabricIds = [...new Set(orderItems.map(item => item.fabric_id))];
      console.log('Fabric IDs found:', fabricIds);
      console.log('Order items with fabric_id:', orderItems.map(item => ({ id: item.id, fabric_id: item.fabric_id, order_id: item.order_id })));

      // Get fabric details separately
      const { data: fabricDetails, error: fabricError } = await supabase
        .from('fabric_master')
        .select('id, fabric_name, color, gsm, image')
        .in('id', fabricIds);

      if (fabricError) {
        console.error('Error loading fabric details:', fabricError);
        toast({
          title: "Error",
          description: "Failed to load fabric details",
          variant: "destructive",
        });
        return;
      }

      console.log('Fabric details loaded:', fabricDetails);

      // First, let's check what's actually in warehouse_inventory
      console.log('Checking warehouse_inventory table structure...');
      const { data: allInventory, error: allInventoryError } = await supabase
        .from('warehouse_inventory')
        .select('*')
        .limit(5);

      if (allInventoryError) {
        console.error('Error checking warehouse_inventory:', allInventoryError);
      } else {
        console.log('Sample warehouse_inventory records:', allInventory);
      }

      // Get ALL warehouse inventory first, then filter in JavaScript to avoid RLS issues
      const { data: allInventoryData, error: inventoryError } = await supabase
        .from('warehouse_inventory')
        .select('*');

      if (inventoryError) {
        console.error('Error loading inventory data:', inventoryError);
        toast({
          title: "Error",
          description: "Failed to load inventory information",
          variant: "destructive",
        });
        return;
      }

      console.log('All warehouse inventory data loaded:', allInventoryData);

      // Filter for our specific fabric IDs in JavaScript
      const inventoryData = (allInventoryData || []).filter(inv => 
        fabricIds.includes(inv.item_id) && inv.status === 'IN_STORAGE'
      );

      console.log('Filtered inventory data for fabric IDs:', inventoryData);
      console.log('Looking for fabric ID:', fabricIds[0], 'in warehouse_inventory');

      // Get bin details separately to avoid complex nested queries
      const binIds = [...new Set((inventoryData || []).map(inv => inv.bin_id).filter(Boolean))];
      let binDetails: any[] = [];
      
      if (binIds.length > 0) {
        const { data: bins, error: binsError } = await supabase
          .from('bins')
          .select(`
            id,
            bin_code,
            rack_id,
            rack:rack_id(
              id,
              rack_name,
              floor_id,
              floor:floor_id(
                id,
                floor_name,
                warehouse_id,
                warehouse:warehouse_id(
                  id,
                  warehouse_name
                )
              )
            )
          `)
          .in('id', binIds);

        if (binsError) {
          console.error('Error loading bin details:', binsError);
        } else {
          binDetails = bins || [];
        }
      }

      console.log('Bin details loaded:', binDetails);

      // Process the data to create fabric info with storage zones
      const processedFabrics: FabricInfo[] = (fabricDetails || []).map(fabric => {
        const fabricInventory = inventoryData?.filter(inv => inv.item_id === fabric.id) || [];
        
        const storage_zones = fabricInventory.map(inv => {
          const bin = binDetails.find(b => b.id === inv.bin_id);
          const rack = bin?.rack;
          const floor = rack?.floor;
          const warehouse = floor?.warehouse;
          
          // Create a location string from warehouse hierarchy
          const location = [
            warehouse?.warehouse_name,
            floor?.floor_name,
            rack?.rack_name,
            bin?.bin_code
          ].filter(Boolean).join(' > ');

          return {
            zone_id: bin?.id || 'unknown',
            zone_name: `${warehouse?.warehouse_name || 'Unknown'} - ${floor?.floor_name || 'Unknown'}`,
            zone_code: bin?.bin_code || 'Unknown',
            location: location || 'Unknown Location',
            available_quantity: inv.quantity || 0,
            reserved_quantity: 0, // No reserved quantity in warehouse_inventory
            net_available: inv.quantity || 0
          };
        });

        const total_available = storage_zones.reduce((sum, zone) => sum + zone.available_quantity, 0);
        const total_reserved = storage_zones.reduce((sum, zone) => sum + zone.reserved_quantity, 0);
        const net_available = storage_zones.reduce((sum, zone) => sum + zone.net_available, 0);

        return {
          fabric_id: fabric.id,
          fabric_name: fabric.fabric_name,
          color: fabric.color,
          gsm: fabric.gsm,
          image: fabric.image,
          total_available_quantity: total_available,
          total_reserved_quantity: total_reserved,
          net_available_quantity: net_available,
          unit: fabricInventory[0]?.unit || 'kg',
          storage_zones
        };
      });

      console.log('Processed fabrics:', processedFabrics);
      setFabrics(processedFabrics);
      
      // Initialize picking quantities to 0 for each fabric and zone
      const initialQuantities: {[key: string]: {[zoneId: string]: number}} = {};
      processedFabrics.forEach(fabric => {
        initialQuantities[fabric.fabric_id] = {};
        fabric.storage_zones.forEach(zone => {
          initialQuantities[fabric.fabric_id][zone.zone_id] = 0;
        });
      });
      setPickingQuantities(initialQuantities);
    } catch (error) {
      console.error('Error loading fabric data:', error);
      toast({
        title: "Error",
        description: "Failed to load fabric information",
        variant: "destructive",
      });
    }
  };

  const loadStorageZones = async () => {
    try {
      const { data, error } = await supabase
        .from('fabric_storage_zones')
        .select('*')
        .eq('is_active', true)
        .order('zone_name');

      if (error) {
        console.error('Error loading storage zones:', error);
        toast({
          title: "Error",
          description: "Failed to load storage zones",
          variant: "destructive",
        });
        return;
      }

      setStorageZones(data || []);
    } catch (error) {
      console.error('Error loading storage zones:', error);
      toast({
        title: "Error",
        description: "Failed to load storage zones",
        variant: "destructive",
      });
    }
  };

  const updatePickingQuantity = (fabricId: string, zoneId: string, quantity: number) => {
    const fabric = fabrics.find(f => f.fabric_id === fabricId);
    if (!fabric) return;

    const zone = fabric.storage_zones.find(z => z.zone_id === zoneId);
    if (!zone) return;

    const maxQuantity = zone.net_available;
    const newQuantity = Math.max(0, Math.min(quantity, maxQuantity));
    
    setPickingQuantities(prev => ({
      ...prev,
      [fabricId]: {
        ...prev[fabricId],
        [zoneId]: newQuantity
      }
    }));
  };

  const incrementQuantity = (fabricId: string, zoneId: string) => {
    const current = pickingQuantities[fabricId]?.[zoneId] || 0;
    updatePickingQuantity(fabricId, zoneId, current + 1);
  };

  const decrementQuantity = (fabricId: string, zoneId: string) => {
    const current = pickingQuantities[fabricId]?.[zoneId] || 0;
    updatePickingQuantity(fabricId, zoneId, current - 1);
  };

  const getTotalPickedQuantity = () => {
    let total = 0;
    Object.values(pickingQuantities).forEach(fabricQuantities => {
      Object.values(fabricQuantities).forEach(zoneQuantity => {
        total += zoneQuantity;
      });
    });
    return total;
  };

  const getFabricTotalPickedQuantity = (fabricId: string) => {
    const fabricQuantities = pickingQuantities[fabricId] || {};
    return Object.values(fabricQuantities).reduce((total, qty) => total + qty, 0);
  };

  const handleSave = async () => {
    const pickedFabrics = fabrics.filter(fabric => getFabricTotalPickedQuantity(fabric.fabric_id) > 0);
    
    if (pickedFabrics.length === 0) {
      toast({
        title: "No Fabric Selected",
        description: "Please select at least one fabric to pick",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // Get current user info
      const { data: { user } } = await supabase.auth.getUser();

      // Create picking records for each fabric and zone combination
      const pickingRecords: any[] = [];
      
      pickedFabrics.forEach(fabric => {
        const fabricQuantities = pickingQuantities[fabric.fabric_id] || {};
        
        Object.entries(fabricQuantities).forEach(([zoneId, quantity]) => {
          if (quantity > 0) {
            pickingRecords.push({
              order_id: orderId,
              fabric_id: fabric.fabric_id,
              storage_zone_id: zoneId,
              picked_quantity: quantity,
              unit: fabric.unit,
              picked_by_id: user?.id || null,
              picked_by_name: user?.user_metadata?.full_name || user?.email || 'System',
              notes: notes
            });
          }
        });
      });

      if (pickingRecords.length === 0) {
        toast({
          title: "No Quantities Selected",
          description: "Please select quantities to pick from storage zones",
          variant: "destructive",
        });
        return;
      }

      // For now, we'll just log the picking records
      // In a full implementation, you would insert into fabric_picking_records
      console.log('Fabric picking records to save:', pickingRecords);

      toast({
        title: "Fabric Picking Recorded",
        description: `Successfully recorded picking of ${getTotalPickedQuantity()} units for order ${orderNumber}`,
      });

      onSuccess();
      onClose();
    } catch (error: any) {
      console.error('Error saving fabric picking:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to save fabric picking",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Pick Fabric for Cutting</DialogTitle>
          <DialogDescription>
            Select fabrics from storage zones for order {orderNumber} - {customerName}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Order Info */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-center space-x-4">
              <Package className="w-8 h-8 text-blue-600" />
              <div>
                <h3 className="font-semibold text-blue-900">Order: {orderNumber}</h3>
                <p className="text-blue-700">Customer: {customerName}</p>
              </div>
            </div>
          </div>

          {/* Fabric Selection */}
          <div className="space-y-4">
            <h4 className="font-medium text-lg">Available Fabrics</h4>
            {fabrics.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Package className="w-12 h-12 mx-auto mb-2 text-gray-400" />
                <p>No fabrics found for this order.</p>
              </div>
            ) : (
              <div className="space-y-6">
                {fabrics.map((fabric) => {
                  const fabricTotalPicked = getFabricTotalPickedQuantity(fabric.fabric_id);
                  
                  return (
                    <Card key={fabric.fabric_id} className="border-2 border-gray-200 p-6">
                      {/* Fabric Header */}
                      <div className="flex items-start space-x-4 mb-6">
                        {/* Fabric Image */}
                        <div className="w-20 h-20 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                          {fabric.image ? (
                            <img 
                              src={fabric.image} 
                              alt={fabric.fabric_name}
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center">
                              <svg className="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                              </svg>
                            </div>
                          )}
                        </div>

                        {/* Fabric Details */}
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-2">
                            <h4 className="text-xl font-semibold text-gray-900">{fabric.fabric_name}</h4>
                            <div 
                              className="w-4 h-4 rounded-full"
                              style={{ backgroundColor: fabric.color?.toLowerCase() || '#cccccc' }}
                            ></div>
                            <span className="text-sm text-gray-600">
                              {fabric.color} • {fabric.gsm} GSM
                            </span>
                          </div>
                          
                          {/* Inventory Summary Cards */}
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                            <div className="text-center p-3 bg-gray-50 rounded-lg">
                              <div className="text-lg font-bold text-gray-900">WH1</div>
                              <div className="text-sm text-gray-600">Warehouse</div>
                            </div>
                            <div className="text-center p-3 bg-green-50 rounded-lg">
                              <div className="text-lg font-bold text-green-700">Total: {fabric.total_available_quantity.toFixed(0)} {fabric.unit}</div>
                              <div className="text-sm text-green-600">Available</div>
                            </div>
                            <div className="text-center p-3 bg-blue-50 rounded-lg">
                              <div className="text-lg font-bold text-blue-700">Storage: {fabric.total_available_quantity.toFixed(0)} {fabric.unit}</div>
                              <div className="text-sm text-blue-600">In Storage</div>
                            </div>
                            <div className="text-center p-3 bg-yellow-50 rounded-lg">
                              <div className="text-lg font-bold text-yellow-700">Dispatch: 0 {fabric.unit}</div>
                              <div className="text-sm text-yellow-600">Ready</div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Storage Zones */}
                      <div className="border-t pt-6">
                        <h5 className="text-sm font-medium text-gray-700 mb-4">Pick from Storage Zones:</h5>
                        {fabric.storage_zones.length === 0 ? (
                          <div className="text-center py-8">
                            <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                              <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                              </svg>
                            </div>
                            <p className="text-gray-500">No inventory found in storage zones</p>
                          </div>
                        ) : (
                          <div className="grid gap-4">
                            {fabric.storage_zones.map((zone) => {
                              const zonePickedQty = pickingQuantities[fabric.fabric_id]?.[zone.zone_id] || 0;
                              const maxQty = zone.net_available;
                              
                              return (
                                <div key={zone.zone_id} className="border-2 border-gray-200 rounded-lg p-4 bg-white hover:border-blue-300 transition-colors">
                                  <div className="flex items-center justify-between mb-3">
                                    <div>
                                      <h6 className="font-semibold text-gray-900">{zone.zone_name}</h6>
                                      <p className="text-sm text-gray-500">{zone.location}</p>
                                    </div>
                                    <div className="text-right">
                                      <p className="text-sm font-semibold text-gray-900">
                                        Available: {zone.available_quantity.toFixed(0)} {fabric.unit}
                                      </p>
                                      <p className="text-xs text-gray-500">
                                        Net: {zone.net_available.toFixed(0)} {fabric.unit}
                                      </p>
                                    </div>
                                  </div>
                                  
                                  {maxQty > 0 && (
                                    <div className="flex items-center justify-center space-x-4">
                                      <Button
                                        variant="outline"
                                        size="lg"
                                        onClick={() => decrementQuantity(fabric.fabric_id, zone.zone_id)}
                                        disabled={zonePickedQty <= 0}
                                        className="w-12 h-12 p-0 text-xl font-bold"
                                      >
                                        -
                                      </Button>
                                      <div className="text-center">
                                        <Input
                                          type="number"
                                          value={zonePickedQty}
                                          onChange={(e) => updatePickingQuantity(fabric.fabric_id, zone.zone_id, parseFloat(e.target.value) || 0)}
                                          className="w-24 h-12 text-center text-lg font-semibold border-2"
                                          min="0"
                                          max={maxQty}
                                          step="0.1"
                                        />
                                        <p className="text-xs text-gray-500 mt-1">{fabric.unit}</p>
                                      </div>
                                      <Button
                                        variant="outline"
                                        size="lg"
                                        onClick={() => incrementQuantity(fabric.fabric_id, zone.zone_id)}
                                        disabled={zonePickedQty >= maxQty}
                                        className="w-12 h-12 p-0 text-xl font-bold"
                                      >
                                        +
                                      </Button>
                                    </div>
                                  )}
                                </div>
                              );
                            })}
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                })}
              </div>
            )}
          </div>

          {/* Notes */}
          <div className="space-y-2">
            <Label htmlFor="notes">Notes (Optional)</Label>
            <Textarea
              id="notes"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Add any notes about the fabric picking..."
              rows={3}
            />
          </div>

          {/* Summary */}
          {getTotalPickedQuantity() > 0 && (
            <div className="bg-green-50 border border-green-200 p-4 rounded-lg">
              <h4 className="font-medium text-green-800 mb-2">Picking Summary</h4>
              <div className="text-green-700">
                Total fabrics to pick: <span className="font-semibold">{getTotalPickedQuantity().toFixed(2)} units</span>
              </div>
            </div>
          )}
        </div>

        <DialogFooter className="flex justify-end space-x-3">
          <Button variant="outline" onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button 
            onClick={handleSave} 
            disabled={loading || getTotalPickedQuantity() === 0}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {loading ? 'Saving...' : `Pick ${getTotalPickedQuantity().toFixed(2)} Units`}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
